{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,CIEO,eAAe,IACpB,GAAI,CACF,IAAM,EAAW,MAAM,MAJX,4EAKZ,GAAI,CAAC,EAAS,EAAE,CAAE,MAAM,AAAI,MAAM,6BAElC,MAAO,AADM,CAAA,MAAM,EAAS,IAAI,EAAhC,EACY,IAAI,AAClB,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,sBAAuB,GAC/B,CACR,CACF,C,M,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GHVA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,ijB,I,E,C,EGA5F,EAAiB,IAAA,IAAoB,qCAAA,YAAA,GAAA,EAAsC,QAAQ,G,I,E,C,ECAnF,EAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,G,I,E,C,ECAxF,EAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,G,I,E,C,ECArF,EAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,G,I,E,C,ECArF,EAAiB,IAAA,IAAoB,sCAAA,YAAA,GAAA,EAAuC,QAAQ,G,I,E,C,ECApF,EAAiB,IAAA,IAAoB,sCAAA,YAAA,GAAA,EAAuC,QAAQ,G,I,E,C,ECApF,EAAiB,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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-870086d6a2aad12e.js","src/js/main.js","src/js/api.js","node_modules/@parcel/runtime-js/lib/runtime-69def0c069673578.js","node_modules/@parcel/runtime-js/lib/runtime-fd73c655dfd8ef13.js","node_modules/@parcel/runtime-js/lib/runtime-2f2b88ae833d6a63.js","node_modules/@parcel/runtime-js/lib/runtime-6b50518c2df621ed.js","node_modules/@parcel/runtime-js/lib/runtime-ebd4a8439b9f3265.js","node_modules/@parcel/runtime-js/lib/runtime-82171f95b0f7779b.js","node_modules/@parcel/runtime-js/lib/runtime-7eead63e69b67710.js","node_modules/@parcel/runtime-js/lib/runtime-b7901724ce75b2cf.js","node_modules/@parcel/runtime-js/lib/runtime-91c370613e8b627f.js","node_modules/@parcel/runtime-js/lib/runtime-bc997abc12b3e838.js","node_modules/@parcel/runtime-js/lib/runtime-226bfa8af7a1648f.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $71bd527d37b0cdad$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"19QLA\\\",\\\"index.2d7fa7f0.js\\\",\\\"ddLaE\\\",\\\"logo.5946c4ee.png\\\",\\\"aUBTB\\\",\\\"dificulty.60711f02.png\\\",\\\"gbXvW\\\",\\\"attack.ccfdc95e.png\\\",\\\"dTYPk\\\",\\\"shield.49198ec4.png\\\",\\\"hxnMD\\\",\\\"magic.99cc66a0.png\\\",\\\"fv8ME\\\",\\\"muted.45d43665.png\\\",\\\"gTsQ0\\\",\\\"audio.3796d48b.png\\\",\\\"92YV2\\\",\\\"pause.b816fda2.png\\\",\\\"hcpvD\\\",\\\"play.3792cb58.png\\\",\\\"hSOO7\\\",\\\"lock.b993b851.png\\\",\\\"8hdxo\\\",\\\"unlock.133f900a.png\\\"]\"));\n\nconst $db1f432b457e32b4$var$API_URL = 'https://ddragon.leagueoflegends.com/cdn/13.20.1/data/en_US/champion.json';\nasync function $db1f432b457e32b4$export$79c992622e0cc238() {\n    try {\n        const response = await fetch($db1f432b457e32b4$var$API_URL);\n        if (!response.ok) throw new Error('Failed to fetch champions');\n        const data = await response.json();\n        return data.data; // Lista de campeones\n    } catch (error) {\n        console.error('Error fetching API:', error);\n        throw error;\n    }\n}\n\n\nvar $d04875999d53e23a$exports = {};\n$d04875999d53e23a$exports = new URL(\"logo.5946c4ee.png\", import.meta.url).toString();\n\n\nvar $de5f7f1d1dd52fa7$exports = {};\n$de5f7f1d1dd52fa7$exports = new URL(\"dificulty.60711f02.png\", import.meta.url).toString();\n\n\nvar $3f57ebd7eb40c026$exports = {};\n$3f57ebd7eb40c026$exports = new URL(\"attack.ccfdc95e.png\", import.meta.url).toString();\n\n\nvar $7aa5ad94d86ab0f1$exports = {};\n$7aa5ad94d86ab0f1$exports = new URL(\"shield.49198ec4.png\", import.meta.url).toString();\n\n\nvar $ee842d3437294013$exports = {};\n$ee842d3437294013$exports = new URL(\"magic.99cc66a0.png\", import.meta.url).toString();\n\n\nvar $e539fb4618309400$exports = {};\n$e539fb4618309400$exports = new URL(\"muted.45d43665.png\", import.meta.url).toString();\n\n\nvar $a8c25444b5d1e653$exports = {};\n$a8c25444b5d1e653$exports = new URL(\"audio.3796d48b.png\", import.meta.url).toString();\n\n\nvar $7b6e0ec6d230ebd0$exports = {};\n$7b6e0ec6d230ebd0$exports = new URL(\"pause.b816fda2.png\", import.meta.url).toString();\n\n\nvar $f989373a33954671$exports = {};\n$f989373a33954671$exports = new URL(\"play.3792cb58.png\", import.meta.url).toString();\n\n\nvar $88a6164ef237cdef$exports = {};\n$88a6164ef237cdef$exports = new URL(\"lock.b993b851.png\", import.meta.url).toString();\n\n\nvar $4243f7d380fc9c43$exports = {};\n$4243f7d380fc9c43$exports = new URL(\"unlock.133f900a.png\", import.meta.url).toString();\n\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const lolLogo = document.getElementById('lolLogo');\n    lolLogo.addEventListener('mouseenter', ()=>{\n        // Quitar clases previas\n        lolLogo.classList.remove('giro-rapido', 'giro-medio', 'giro-lento');\n        // Agregar la clase de giro rápido\n        lolLogo.classList.add('giro-rapido');\n        // Esperar a que termine el giro rápido y agregar el giro medio\n        setTimeout(()=>{\n            lolLogo.classList.remove('giro-rapido');\n            lolLogo.classList.add('giro-medio');\n            // Esperar a que termine el giro medio y agregar el giro lento\n            setTimeout(()=>{\n                lolLogo.classList.remove('giro-medio');\n                lolLogo.classList.add('giro-lento');\n            }, 1000); // Duración del giro medio\n        }, 500); // Duración del giro rápido\n    });\n    // Selección del video\n    const backgroundVideo = document.getElementById('background-video');\n    const muteButton = document.getElementById('mute-button');\n    const pauseButton = document.getElementById('pause-button');\n    //reproducir el video al cargar la pagina\n    window.onload = ()=>{\n        backgroundVideo.muted = true; // Asegúrate de que el video esté silenciado para permitir autoplay\n        backgroundVideo.play().catch((error)=>{\n            console.error('Error al reproducir el video:', error);\n            // Intentar nuevamente sin silenciar si hay un error\n            backgroundVideo.muted = false;\n            backgroundVideo.play();\n        });\n    };\n    // Evento para alternar entre silenciar y activar el sonido\n    muteButton.addEventListener('click', ()=>{\n        muteButton.textContent = '';\n        // Crear un nuevo elemento img\n        const imgElement = document.createElement('img');\n        if (backgroundVideo.muted) {\n            backgroundVideo.muted = false; // Activar sonido\n            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($e539fb4618309400$exports))); // Asignar la nueva imagen\n            muteButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            muteButton.appendChild(document.createTextNode('Silenciar')); // Agregar texto\n        } else {\n            backgroundVideo.muted = true; // Silenciar sonido\n            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($a8c25444b5d1e653$exports))); // Asignar la nueva imagen\n            muteButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            muteButton.appendChild(document.createTextNode('Activar Sonido')); // Agregar texto\n        }\n        console.log('Nueva imagen agregada:', imgElement.src);\n    });\n    // Evento para pausar y reanudar el video\n    pauseButton.addEventListener('click', ()=>{\n        pauseButton.textContent = '';\n        // Crear un nuevo elemento img\n        const imgElement = document.createElement('img');\n        if (backgroundVideo.paused) {\n            backgroundVideo.play();\n            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($7b6e0ec6d230ebd0$exports))); // Asignar la nueva imagen\n            pauseButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            pauseButton.appendChild(document.createTextNode('Pausar')); // Cambiar texto del botón a 'Pausar'\n        } else {\n            backgroundVideo.pause();\n            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($f989373a33954671$exports))); // Asignar la nueva imagen\n            pauseButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            pauseButton.appendChild(document.createTextNode('Play')); // Cambiar texto del botón a 'Reanudar'\n        }\n        console.log('Nueva imagen agregada:', imgElement.src);\n    });\n    // Función principal para cargar campeones\n    const championsContainer = document.getElementById('champions-container');\n    async function loadChampions() {\n        try {\n            const champions = await (0, $db1f432b457e32b4$export$79c992622e0cc238)();\n            Object.values(champions).forEach((champion)=>{\n                // Crear la estructura de la tarjeta\n                const championCard = document.createElement('div');\n                championCard.classList.add('card');\n                championCard.setAttribute('tabindex', '0'); // Mejora de accesibilidad\n                const cardInner = document.createElement('div');\n                cardInner.classList.add('card-inner');\n                const cardFront = document.createElement('div');\n                cardFront.classList.add('card-front');\n                cardFront.innerHTML = `\n                <h3>${champion.name}</h3>\n                <img class=\"avatar\" src=\"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${champion.id}_0.jpg\" alt=\"${champion.name}\">\n                <img class=\"logo\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($d04875999d53e23a$exports))}\">\n            `;\n                const cardBack = document.createElement('div');\n                cardBack.classList.add('card-back');\n                let difficultyIcons = '';\n                let attackIcons = '';\n                let shieldIcons = '';\n                let magicIcons = '';\n                const maxIcons = 5;\n                for(let i = 0; i < Math.min(champion.info.difficulty, maxIcons); i++)difficultyIcons += `<img class=\"icons-detail\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($de5f7f1d1dd52fa7$exports))}\" alt=\"Difficulty Icon\">`;\n                if (champion.info.difficulty > maxIcons) {\n                    const remaining = champion.info.difficulty - maxIcons;\n                    difficultyIcons += `<span class=\"difficulty-more\">+${remaining}</span>`;\n                }\n                for(let i = 0; i < Math.min(champion.info.attack, maxIcons); i++)attackIcons += `<img class=\"icons-detail\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($3f57ebd7eb40c026$exports))}\" alt=\"Attack Icon\">`;\n                if (champion.info.attack > maxIcons) {\n                    const remainingAttack = champion.info.attack - maxIcons;\n                    attackIcons += `<span class=\"attack-more\">+${remainingAttack}</span>`;\n                }\n                for(let i = 0; i < Math.min(champion.info.defense, maxIcons); i++)shieldIcons += `<img class=\"icons-detail\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($7aa5ad94d86ab0f1$exports))}\" alt=\"Shield Icon\">`;\n                if (champion.info.shield > maxIcons) {\n                    const remainingShield = champion.info.defense - maxIcons;\n                    shieldIcons += `<span class=\"shield-more\">+${remainingShield}</span>`;\n                }\n                for(let i = 0; i < Math.min(champion.info.magic, maxIcons); i++)magicIcons += `<img class=\"icons-detail\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($ee842d3437294013$exports))}\" alt=\"Magic Icon\">`;\n                if (champion.info.magic > maxIcons) {\n                    const remainingMagic = champion.info.magic - maxIcons;\n                    magicIcons += `<span class=\"magic-more\">+${remainingMagic}</span>`;\n                }\n                cardBack.innerHTML = `\n                <p class=\"card-title\">${champion.title}</p>\n                <div class=\"img-back\">\n                    <img src=\"https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${champion.id}_0.jpg\" alt=\"${champion.name}\">\n                </div>\n                <div class=\"card-details\">\n                    <h3>${champion.name}</h3><hr>\n                    <div class=\"card-intro\">\n                        <p><strong>Rol:</strong><small>${champion.tags.join('</small> <small>')}</small></p>\n                        <p><strong>Dificultad:</strong> <span>${difficultyIcons == 0 ? 'Sin habilidad' : difficultyIcons}</span></p>\n                        <p><strong>Magia:</strong> <span>${magicIcons == 0 ? 'Sin habilidad' : magicIcons}</span></p>\n                        <p><strong>Ataque:</strong> <span>${attackIcons == 0 ? 'Sin habilidad' : attackIcons}</span></p>\n                        <p><strong>Defenza:</strong> <span>${shieldIcons == 0 ? 'Sin habilidad' : shieldIcons}</span></p>\n                    </div>\n                    <buttom class=\"lock-button\"><img src=\"${0, (/*@__PURE__*/$parcel$interopDefault($4243f7d380fc9c43$exports))}\"></buttom>\n                </div>\n            `;\n                cardInner.appendChild(cardFront);\n                cardInner.appendChild(cardBack);\n                championCard.appendChild(cardInner);\n                championsContainer.appendChild(championCard);\n                // Eventos de interacción para girar y sonido\n                // championCard.addEventListener('pointerenter', () => {\n                //     championCard.classList.add('is-flipped');\n                //     slashSound.currentTime = 0;\n                //     slashSound.play();\n                // });\n                //Eventos de interacción para resplandor\n                championCard.addEventListener('mousemove', ()=>{});\n                // Selección de todas las tarjetas y botones de bloqueo\n                const championCards = document.querySelectorAll('.card');\n                championCards.forEach((championCard)=>{\n                    let isLocked = false; // Estado de bloqueo individual para cada carta\n                    const lockButton = championCard.querySelector('.lock-button'); // Botón específico de cada carta\n                    // Evento de click en el botón de bloqueo/desbloqueo\n                    lockButton.addEventListener('click', (event)=>{\n                        event.stopPropagation(); // Evitar que el clic se propague al resto de la tarjeta\n                        const imgElement = lockButton.querySelector('img') || document.createElement('img');\n                        if (isLocked) {\n                            isLocked = false;\n                            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($4243f7d380fc9c43$exports))); // Cambiar a imagen de desbloqueo\n                            if (!lockButton.contains(imgElement)) lockButton.appendChild(imgElement); // Asegurarse de que la imagen esté en el botón\n                            championCard.classList.remove('is-locked'); // Quitar clase de estado bloqueado\n                            const lockSound = document.getElementById('lock-sound');\n                            lockSound.play().catch((error)=>console.error('Error al reproducir el sonido:', error));\n                            console.log('Tarjeta desbloqueada');\n                        } else {\n                            isLocked = true;\n                            imgElement.src = (0, (/*@__PURE__*/$parcel$interopDefault($88a6164ef237cdef$exports))); // Cambiar a imagen de bloqueo\n                            if (!lockButton.contains(imgElement)) lockButton.appendChild(imgElement); // Asegurarse de que la imagen esté en el botón\n                            championCard.classList.add('is-locked'); // Agregar clase de estado bloqueado\n                            const lockSound = document.getElementById('lock-sound');\n                            lockSound.play().catch((error)=>console.error('Error al reproducir el sonido:', error));\n                            console.log('Tarjeta bloqueada');\n                        }\n                    });\n                    // Evento para girar la tarjeta, solo si no está bloqueada\n                    championCard.addEventListener('click', ()=>{\n                        if (!isLocked) {\n                            championCard.classList.add('is-flipped'); // Girar la tarjeta\n                            const slashSound = document.getElementById('slash-sound');\n                            slashSound.play().catch((error)=>console.error('Error al reproducir el sonido:', error));\n                        }\n                    });\n                    // Evento para restablecer la tarjeta al salir del puntero, solo si no está bloqueada\n                    championCard.addEventListener('pointerleave', ()=>{\n                        if (!isLocked) championCard.classList.remove('is-flipped');\n                    });\n                    // **Nuevo comportamiento: cambiar el color del borde en doble clic si está bloqueada**\n                    championCard.addEventListener('dblclick', ()=>{\n                        if (isLocked) {\n                            const originalBorderColor = getComputedStyle(championCard).borderColor; // Guardar el color original\n                            const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}`; // Generar un color aleatorio\n                            championCard.style.borderColor = randomColor; // Cambiar el borde a color aleatorio\n                            console.log(`Nuevo color de borde: ${randomColor}`);\n                            // Restaurar el color original después de 2 segundos\n                            setTimeout(()=>{\n                                championCard.style.borderColor = \"\";\n                                championCard.style.borderColor = originalBorderColor;\n                                console.log('Color del borde restaurado');\n                            }, 2000);\n                        }\n                    });\n                });\n            });\n        } catch (error) {\n            console.error('Error al cargar los campeones:', error);\n            championsContainer.innerHTML = `<p>Error al cargar los campeones, Por favor intenta m\\xe1s tarde.</p>`;\n        }\n    }\n    loadChampions();\n});\n\n\n//# sourceMappingURL=index.2d7fa7f0.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"19QLA\\\",\\\"index.2d7fa7f0.js\\\",\\\"ddLaE\\\",\\\"logo.5946c4ee.png\\\",\\\"aUBTB\\\",\\\"dificulty.60711f02.png\\\",\\\"gbXvW\\\",\\\"attack.ccfdc95e.png\\\",\\\"dTYPk\\\",\\\"shield.49198ec4.png\\\",\\\"hxnMD\\\",\\\"magic.99cc66a0.png\\\",\\\"fv8ME\\\",\\\"muted.45d43665.png\\\",\\\"gTsQ0\\\",\\\"audio.3796d48b.png\\\",\\\"92YV2\\\",\\\"pause.b816fda2.png\\\",\\\"hcpvD\\\",\\\"play.3792cb58.png\\\",\\\"hSOO7\\\",\\\"lock.b993b851.png\\\",\\\"8hdxo\\\",\\\"unlock.133f900a.png\\\"]\"));","\n\nimport { fetchChampions } from './api.js';\nimport logoImage from '../assets/images/logo.png';\nimport difficultyImage from '../assets/images/dificulty.png';\nimport attackImage from '../assets/images/attack.png';\nimport shieldImage from '../assets/images/shield.png';\nimport magicImage from '../assets/images/magic.png';\nimport iconsMuted from '../assets/images/muted.png';\nimport iconsAudio from '../assets/images/audio.png';\nimport iconsPause from '../assets/images/pause.png';\nimport iconsPlay from '../assets/images/play.png';\nimport lock from '../assets/images/lock.png';\nimport unlock from '../assets/images/unlock.png';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const lolLogo = document.getElementById('lolLogo');\n\n    lolLogo.addEventListener('mouseenter', () => {\n        // Quitar clases previas\n        lolLogo.classList.remove('giro-rapido', 'giro-medio', 'giro-lento');\n\n        // Agregar la clase de giro rápido\n        lolLogo.classList.add('giro-rapido');\n\n        // Esperar a que termine el giro rápido y agregar el giro medio\n        setTimeout(() => {\n            lolLogo.classList.remove('giro-rapido');\n            lolLogo.classList.add('giro-medio');\n\n            // Esperar a que termine el giro medio y agregar el giro lento\n            setTimeout(() => {\n                lolLogo.classList.remove('giro-medio');\n                lolLogo.classList.add('giro-lento');\n            }, 1000); // Duración del giro medio\n        }, 500); // Duración del giro rápido\n    });\n\n\n\n    // Selección del video\n    const backgroundVideo = document.getElementById('background-video');\n    const muteButton = document.getElementById('mute-button');\n    const pauseButton = document.getElementById('pause-button');\n\n    //reproducir el video al cargar la pagina\n    window.onload = () => {\n        backgroundVideo.muted = true; // Asegúrate de que el video esté silenciado para permitir autoplay\n        backgroundVideo.play()\n            .catch(error => {\n                console.error('Error al reproducir el video:', error);\n                // Intentar nuevamente sin silenciar si hay un error\n                backgroundVideo.muted = false;\n                backgroundVideo.play();\n            });\n    };\n\n    // Evento para alternar entre silenciar y activar el sonido\n    muteButton.addEventListener('click', () => {\n        muteButton.textContent = '';\n        // Crear un nuevo elemento img\n        const imgElement = document.createElement('img');\n\n        if (backgroundVideo.muted) {\n            backgroundVideo.muted = false; // Activar sonido\n            imgElement.src = iconsMuted; // Asignar la nueva imagen\n            muteButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            muteButton.appendChild(document.createTextNode('Silenciar')); // Agregar texto\n        } else {\n            backgroundVideo.muted = true; // Silenciar sonido\n            imgElement.src = iconsAudio; // Asignar la nueva imagen\n            muteButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            muteButton.appendChild(document.createTextNode('Activar Sonido')); // Agregar texto\n        }\n\n        console.log('Nueva imagen agregada:', imgElement.src);\n    });\n\n\n\n\n\n\n    // Evento para pausar y reanudar el video\n    pauseButton.addEventListener('click', () => {\n        pauseButton.textContent = '';\n        // Crear un nuevo elemento img\n        const imgElement = document.createElement('img');\n        if (backgroundVideo.paused) {\n            backgroundVideo.play();\n            imgElement.src = iconsPause; // Asignar la nueva imagen\n            pauseButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            pauseButton.appendChild(document.createTextNode('Pausar')); // Cambiar texto del botón a 'Pausar'\n        } else {\n            backgroundVideo.pause();\n            imgElement.src = iconsPlay; // Asignar la nueva imagen\n            pauseButton.appendChild(imgElement); // Agregar img al botón\n            imgElement.classList.add('iconsBtn'); // agrego una clase\n            pauseButton.appendChild(document.createTextNode('Play')); // Cambiar texto del botón a 'Reanudar'\n        }\n\n        console.log('Nueva imagen agregada:', imgElement.src);\n    });\n\n\n\n\n\n\n    // Función principal para cargar campeones\n    const championsContainer = document.getElementById('champions-container');\n\n    async function loadChampions() {\n        try {\n            const champions = await fetchChampions();\n            Object.values(champions).forEach(champion => {\n                // Crear la estructura de la tarjeta\n                const championCard = document.createElement('div');\n                championCard.classList.add('card');\n                championCard.setAttribute('tabindex', '0'); // Mejora de accesibilidad\n\n                const cardInner = document.createElement('div');\n                cardInner.classList.add('card-inner');\n\n                const cardFront = document.createElement('div');\n                cardFront.classList.add('card-front');\n                cardFront.innerHTML = `\n                <h3>${champion.name}</h3>\n                <img class=\"avatar\" src=\"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${champion.id}_0.jpg\" alt=\"${champion.name}\">\n                <img class=\"logo\" src=\"${logoImage}\">\n            `;\n\n                const cardBack = document.createElement('div');\n                cardBack.classList.add('card-back');\n                let difficultyIcons = '';\n                let attackIcons = '';\n                let shieldIcons = '';\n                let magicIcons = ''\n                const maxIcons = 5;\n\n\n                for (let i = 0; i < Math.min(champion.info.difficulty, maxIcons); i++) {\n                    difficultyIcons += `<img class=\"icons-detail\" src=\"${difficultyImage}\" alt=\"Difficulty Icon\">`;\n                }\n                if (champion.info.difficulty > maxIcons) {\n                    const remaining = champion.info.difficulty - maxIcons;\n                    difficultyIcons += `<span class=\"difficulty-more\">+${remaining}</span>`;\n                }\n\n                for (let i = 0; i < Math.min(champion.info.attack, maxIcons); i++) {\n                    attackIcons += `<img class=\"icons-detail\" src=\"${attackImage}\" alt=\"Attack Icon\">`;\n                }\n                if (champion.info.attack > maxIcons) {\n                    const remainingAttack = champion.info.attack - maxIcons;\n                    attackIcons += `<span class=\"attack-more\">+${remainingAttack}</span>`;\n                }\n\n                for (let i = 0; i < Math.min(champion.info.defense, maxIcons); i++) {\n                    shieldIcons += `<img class=\"icons-detail\" src=\"${shieldImage}\" alt=\"Shield Icon\">`;\n                }\n                if (champion.info.shield > maxIcons) {\n                    const remainingShield = champion.info.defense - maxIcons;\n                    shieldIcons += `<span class=\"shield-more\">+${remainingShield}</span>`;\n                }\n\n                for (let i = 0; i < Math.min(champion.info.magic, maxIcons); i++) {\n                    magicIcons += `<img class=\"icons-detail\" src=\"${magicImage}\" alt=\"Magic Icon\">`;\n                }\n                if (champion.info.magic > maxIcons) {\n                    const remainingMagic = champion.info.magic - maxIcons;\n                    magicIcons += `<span class=\"magic-more\">+${remainingMagic}</span>`;\n                }\n\n                cardBack.innerHTML = `\n                <p class=\"card-title\">${champion.title}</p>\n                <div class=\"img-back\">\n                    <img src=\"https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${champion.id}_0.jpg\" alt=\"${champion.name}\">\n                </div>\n                <div class=\"card-details\">\n                    <h3>${champion.name}</h3><hr>\n                    <div class=\"card-intro\">\n                        <p><strong>Rol:</strong><small>${champion.tags.join('</small> <small>')}</small></p>\n                        <p><strong>Dificultad:</strong> <span>${difficultyIcons == 0 ? 'Sin habilidad' : difficultyIcons}</span></p>\n                        <p><strong>Magia:</strong> <span>${magicIcons == 0 ? 'Sin habilidad' : magicIcons}</span></p>\n                        <p><strong>Ataque:</strong> <span>${attackIcons == 0 ? 'Sin habilidad' : attackIcons}</span></p>\n                        <p><strong>Defenza:</strong> <span>${shieldIcons == 0 ? 'Sin habilidad' : shieldIcons}</span></p>\n                    </div>\n                    <buttom class=\"lock-button\"><img src=\"${unlock}\"></buttom>\n                </div>\n            `;\n\n\n\n                cardInner.appendChild(cardFront);\n                cardInner.appendChild(cardBack);\n                championCard.appendChild(cardInner);\n                championsContainer.appendChild(championCard);\n\n                // Eventos de interacción para girar y sonido\n                // championCard.addEventListener('pointerenter', () => {\n                //     championCard.classList.add('is-flipped');\n                //     slashSound.currentTime = 0;\n                //     slashSound.play();\n\n                // });\n\n                //Eventos de interacción para resplandor\n                championCard.addEventListener('mousemove', () => {\n\n\n                });\n                // Selección de todas las tarjetas y botones de bloqueo\n                const championCards = document.querySelectorAll('.card');\n\n                championCards.forEach((championCard) => {\n                    let isLocked = false; // Estado de bloqueo individual para cada carta\n                    const lockButton = championCard.querySelector('.lock-button'); // Botón específico de cada carta\n\n                    // Evento de click en el botón de bloqueo/desbloqueo\n                    lockButton.addEventListener('click', (event) => {\n                        event.stopPropagation(); // Evitar que el clic se propague al resto de la tarjeta\n                        const imgElement = lockButton.querySelector('img') || document.createElement('img');\n                        if (isLocked) {\n                            isLocked = false;\n                            imgElement.src = unlock; // Cambiar a imagen de desbloqueo\n                            if (!lockButton.contains(imgElement)) {\n                                lockButton.appendChild(imgElement); // Asegurarse de que la imagen esté en el botón\n                            }\n                            championCard.classList.remove('is-locked'); // Quitar clase de estado bloqueado\n                            const lockSound = document.getElementById('lock-sound');\n                            lockSound.play().catch((error) => console.error('Error al reproducir el sonido:', error));\n                            console.log('Tarjeta desbloqueada');\n                        } else {\n                            isLocked = true;\n                            imgElement.src = lock; // Cambiar a imagen de bloqueo\n                            if (!lockButton.contains(imgElement)) {\n                                lockButton.appendChild(imgElement); // Asegurarse de que la imagen esté en el botón\n                            }\n                            championCard.classList.add('is-locked'); // Agregar clase de estado bloqueado\n                            const lockSound = document.getElementById('lock-sound');\n                            lockSound.play().catch((error) => console.error('Error al reproducir el sonido:', error));\n                            console.log('Tarjeta bloqueada');\n                        }\n                    });\n\n                    // Evento para girar la tarjeta, solo si no está bloqueada\n                    championCard.addEventListener('click', () => {\n                        if (!isLocked) {\n                            championCard.classList.add('is-flipped'); // Girar la tarjeta\n                            const slashSound = document.getElementById('slash-sound');\n                            slashSound.play().catch((error) => console.error('Error al reproducir el sonido:', error));\n                        }\n                    });\n\n                    // Evento para restablecer la tarjeta al salir del puntero, solo si no está bloqueada\n                    championCard.addEventListener('pointerleave', () => {\n                        if (!isLocked) {\n                            championCard.classList.remove('is-flipped');\n                        }\n                    });\n\n                    // **Nuevo comportamiento: cambiar el color del borde en doble clic si está bloqueada**\n                    championCard.addEventListener('dblclick', () => {\n                        if (isLocked) {\n                            const originalBorderColor = getComputedStyle(championCard).borderColor; // Guardar el color original\n                            const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}`; // Generar un color aleatorio\n                            championCard.style.borderColor = randomColor; // Cambiar el borde a color aleatorio\n                            console.log(`Nuevo color de borde: ${randomColor}`);\n\n                            // Restaurar el color original después de 2 segundos\n                            setTimeout(() => {\n                                championCard.style.borderColor = \"\";\n                                championCard.style.borderColor = originalBorderColor;\n                                console.log('Color del borde restaurado');\n                            }, 2000);\n                        }\n                    });\n                });\n\n            });\n        } catch (error) {\n            console.error('Error al cargar los campeones:', error);\n            championsContainer.innerHTML = `<p>Error al cargar los campeones, Por favor intenta más tarde.</p>`;\n        }\n    }\n\n    loadChampions();\n\n});\n","const API_URL = 'https://ddragon.leagueoflegends.com/cdn/13.20.1/data/en_US/champion.json';\n\nexport async function fetchChampions() {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) throw new Error('Failed to fetch champions');\n    const data = await response.json();\n    return data.data; // Lista de campeones\n  } catch (error) {\n    console.error('Error fetching API:', error);\n    throw error;\n  }\n}\n","module.exports = new __parcel__URL__(\"logo.5946c4ee.png\").toString();","module.exports = new __parcel__URL__(\"dificulty.60711f02.png\").toString();","module.exports = new __parcel__URL__(\"attack.ccfdc95e.png\").toString();","module.exports = new __parcel__URL__(\"shield.49198ec4.png\").toString();","module.exports = new __parcel__URL__(\"magic.99cc66a0.png\").toString();","module.exports = new __parcel__URL__(\"muted.45d43665.png\").toString();","module.exports = new __parcel__URL__(\"audio.3796d48b.png\").toString();","module.exports = new __parcel__URL__(\"pause.b816fda2.png\").toString();","module.exports = new __parcel__URL__(\"play.3792cb58.png\").toString();","module.exports = new __parcel__URL__(\"lock.b993b851.png\").toString();","module.exports = new __parcel__URL__(\"unlock.133f900a.png\").toString();"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","$db1f432b457e32b4$export$79c992622e0cc238","response","fetch","ok","Error","data","json","error","console","id","exports","init","module","call","err","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$d04875999d53e23a$exports","$de5f7f1d1dd52fa7$exports","$3f57ebd7eb40c026$exports","$7aa5ad94d86ab0f1$exports","$ee842d3437294013$exports","$e539fb4618309400$exports","$a8c25444b5d1e653$exports","$7b6e0ec6d230ebd0$exports","$f989373a33954671$exports","$88a6164ef237cdef$exports","$4243f7d380fc9c43$exports","document","addEventListener","lolLogo","getElementById","classList","remove","add","setTimeout","backgroundVideo","muteButton","pauseButton","window","onload","muted","play","catch","textContent","imgElement","createElement","src","appendChild","createTextNode","log","paused","pause","championsContainer","loadChampions","champions","values","forEach","champion","championCard","setAttribute","cardInner","cardFront","innerHTML","name","cardBack","difficultyIcons","attackIcons","shieldIcons","magicIcons","Math","min","info","difficulty","remaining","attack","remainingAttack","defense","shield","remainingShield","magic","remainingMagic","title","tags","join","championCards","querySelectorAll","isLocked","lockButton","querySelector","event","stopPropagation","contains","lockSound","slashSound","originalBorderColor","getComputedStyle","borderColor","randomColor","floor","random","style"],"version":3,"file":"index.2d7fa7f0.js.map"}